{"version":3,"sources":["webpack://gem-puzzle/./src/ts/ui/utils.ts","webpack://gem-puzzle/./src/ts/ui/updater.ts","webpack://gem-puzzle/./src/ts/state/time.ts","webpack://gem-puzzle/./src/ts/state/move.ts","webpack://gem-puzzle/./src/ts/state/sound.ts","webpack://gem-puzzle/./src/ts/engine/mover.ts","webpack://gem-puzzle/./src/ts/engine/searcher.ts","webpack://gem-puzzle/./src/ts/engine/solver.ts","webpack://gem-puzzle/./src/ts/engine/board.ts","webpack://gem-puzzle/./src/ts/state/board.ts","webpack://gem-puzzle/./src/ts/ui/menu_ui.ts","webpack://gem-puzzle/./src/ts/ui/game_over_ui.ts","webpack://gem-puzzle/./src/ts/ui/game_ui.ts","webpack://gem-puzzle/./src/ts/ui/main_ui.ts","webpack://gem-puzzle/./src/ts/index.ts"],"names":["buttonElement","state","button","document","createElement","className","textContent","addEventListener","eventListener","contentElement","content","elements","forEach","element","append","titleElement","title","type","updateText","text","querySelector","interval","timeState","totalSec","format","start","window","setInterval","timing","stop","clearInterval","clear","sec","Math","floor","min","value","result","String","length","moveState","amount","soundState","on","board","current","blank","getElementById","isTop","x","y","style","top","isLeft","left","isRight","isBottom","sound","currentTime","play","move","getNumberPosition","i","j","getPosition","isOdd","num","isEven","isSolvable","row","width","inversion","arr","reduce","res","val","valIndex","indexOf","slice","getInversion","getBlankNumber","isSolved","every","rowIndex","col","colIndex","shuffle","random","createRow","range","sqrt","iter","push","createBoard","size","boardState","values","generate","pow","generateBoard","menuUI","menu","event","blockout","classList","remove","time","body","innerHTML","soundEffect","gameUI","gameOverUI","blockoutUI","target","mainUI","message","moves","gameover","game","gameInfoUI","burger","contains","add","boardUI","grid","item","index","number","childNodes","parseInt","gameInfo","id","height","draggable","opacity","preventDefault","dataTransfer","getData","setData","main","sliderElement","leftBtn","currentBtn","rightBtn","src","slider","leftButton","currentButton","rightButton"],"mappings":"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","file":"bundle.js","sourcesContent":["import { ButtonElement, ContentElement, TitleElement } from \"../interfaces\"\n\nexport const buttonElement = (state: ButtonElement): HTMLElement => {\n    const button = document.createElement('button')\n    button.className = state.className\n    button.textContent = state.textContent\n    button.addEventListener('click', state.eventListener)\n    return button\n}\n\nexport const contentElement = (state: ContentElement): HTMLElement => {\n    const content = document.createElement('div')\n    content.className = state.className\n    state.elements.forEach((element) => content.append(element))\n    return content\n}\n\nexport const titleElement = (state: TitleElement): HTMLElement => {\n    const title = document.createElement(state.type)\n    title.className = state.className\n    title.textContent = state.textContent\n    return title\n}","export const updateText = (className: string, text: string) => {\n    const element = document.querySelector(`.${className}`)\n    if (!element || !('textContent' in element)) return\n    element.textContent = text\n}","import { Time } from '../interfaces'\nimport {updateText} from '../ui/updater'\n\nlet interval: number\n\nconst timeState: Time = {\n    totalSec: 0,\n    format: '00:00',\n\n    start: () => {\n        interval = window.setInterval(() => {\n            timing(timeState)\n        }, 1000)\n    },\n\n    stop: () => {\n        clearInterval(interval)\n    },\n\n    clear: () => {\n        timeState.totalSec = 0\n        clearInterval(interval)\n    }\n}\n\nexport default timeState\n\nconst timing = (timeState: Time): void => {\n    timeState.totalSec += 1\n    const sec = Math.floor(timeState.totalSec % 60)\n    const min = Math.floor(timeState.totalSec / 60)\n    timeState.format = `${format(min)}:${format(sec)}`\n    updateText('game__time-value', timeState.format)\n}\n\nconst format = (value: number): string => {\n    const result = String(value)\n    return result.length < 2 ? '0' + result : result\n}","import { Move } from \"../interfaces\"\n\nconst moveState: Move = {\n    amount: 0,\n    \n    clear: () => {\n        moveState.amount = 0\n    }\n}\n\nexport default moveState","import { Sound } from \"../interfaces\"\n\nconst soundState: Sound = {\n    on: false,\n\n    clear: () => {\n        soundState.on = false\n    }\n}\n\n\nexport default soundState","import moveState from '../state/move'\nimport soundState from '../state/sound'\nimport { updateText } from '../ui/updater'\nimport { Position } from '../interfaces'\n\nexport const move = (board: number[][], current: Position, element: HTMLElement): void => {\n    const blank = document.getElementById('blank')\n    if (!blank) return\n\n    if (isTop(board, current)) {\n        [board[current.x][current.y], board[current.x - 1][current.y]] = [board[current.x - 1][current.y], board[current.x][current.y]];\n        [element.style.top, blank.style.top] = [blank.style.top, element.style.top];\n    } else if (isLeft(board, current)) {\n        [board[current.x][current.y], board[current.x][current.y - 1]] = [board[current.x][current.y - 1], board[current.x][current.y]];\n        [element.style.left, blank.style.left] = [blank.style.left, element.style.left];\n    } else if (isRight(board, current)) {\n        [board[current.x][current.y], board[current.x][current.y + 1]] = [board[current.x][current.y + 1], board[current.x][current.y]];\n        [element.style.left, blank.style.left] = [blank.style.left, element.style.left];\n    } else if (isBottom(board, current)){\n        [board[current.x][current.y], board[current.x + 1][current.y]] = [board[current.x + 1][current.y], board[current.x][current.y]];\n        [element.style.top, blank.style.top] = [blank.style.top, element.style.top];\n    } else {\n        return\n    }\n    if (soundState.on) {\n        const sound = document.querySelector('.sound') as HTMLAudioElement\n        if (sound) {\n            sound.currentTime = 0\n            sound.play()\n        }\n    }\n    moveState.amount += 1\n    updateText('game__moves-value', String(moveState.amount))\n}\n\nconst isTop = (board: number[][], current: Position): boolean => {\n    const {x, y} = current\n    if (x - 1 < 0) return false\n    return board[x - 1][y] === 0\n}\n\nconst isBottom = (board: number[][], current: Position): boolean => {\n    const {x, y} = current\n    if (x + 1 >= board.length) return false\n    return board[x + 1][y] === 0\n}\n\nconst isLeft = (board: number[][], current: Position): boolean => {\n    const {x, y} = current\n    if (y - 1 < 0) return false\n    return board[x][y - 1] === 0\n}\n\nconst isRight = (board: number[][], current: Position): boolean => {\n    const {x, y} = current\n    if (y + 1 >= board[0].length) return false\n    return board[x][y + 1] === 0\n}","import { Position } from '../interfaces'\n\nexport const getPosition = (board: number[][], value: number): Position => {\n    for (let i: number = 0; i < board.length; i++) {\n        for (let j: number = 0; j < board[0].length; j++) {\n            if (board[i][j] === value) return {x: i, y: j}\n        } \n    }\n    return {x: -1, y: -1}\n}\n\nexport const getBlankPosition = (board: number[][]): Position => getPosition(board, 0)\n\nexport const getNumberPosition = (board: number[][], value: number): Position => getPosition(board, value)\n\nexport const getExpectedPosition = (board: number[][], length: number, target: number): Position => {\n    let row: number = 1\n    while (target > length * row) row += 1\n    const column = (length - 1) - Math.abs((length * row) - target)\n    return {\n        x: target % length === 0 ? row: row - 1, \n        y:  target % length === 0 ? column - 1: column\n    }\n}","export const getInversion = (arr: number[], val: number): number => {\n    const valIndex: number = arr.indexOf(val)\n    const zeroIndex: number = arr.indexOf(0)\n    return val - arr.slice(0, valIndex + 1).reduce((res: number, element: number): number => (element !== 0 && element <= val) ? res + 1 : res, 0)\n}\n\nexport const getSumInversion = (arr: number[]): number => arr.reduce((res, element) => res + getInversion(arr, element), 0)\n\nconst isOdd = (num: number) => num % 2 !== 0\n\nconst isEven = (num: number) => num % 2 === 0\n\nexport const isSolvable = (board: number[][], row: number[]): boolean => {\n    const width = board[0].length\n    const inversion = getSumInversion(row)\n    const blank = getBlankNumber(board)\n    if (isOdd(width) && isEven(inversion) || \n        isEven(width) && isEven(blank) && isOdd(inversion) || \n        isEven(width) && isOdd(blank) && isEven(inversion)) {\n        return true\n    }\n    return false\n}\n\nexport const getBlankNumber = (board: number[][]): number => {\n    for (let i: number = board.length - 1; i >= 0; i--) {\n        for (let j: number = board[0].length - 1; j >=0; j--) {\n            if (board[i][j] === 0) return board.length - i\n        }\n    }\n    return -1\n}\n\nexport const isSolved = (board: number[][]): boolean => board.every((row, rowIndex) => row.every((col, colIndex) => {\n    if (col === 0) {\n        return rowIndex === board[0].length - 1 && colIndex === board[0].length - 1\n    }\n    return ((rowIndex * board[0].length) + (colIndex + 1)) === col\n}))","import {isSolvable} from './solver'\n\nexport const shuffle = (arr: number[]): number[] => {\n    if (arr.length <= 1) return arr\n    const result: number[] = arr.slice()\n    for (let i: number = result.length - 1; i > 0; i--) {\n        const j: number = Math.floor(Math.random() * (i + 1));\n        [result[i], result[j]] = [result[j], result[i]];\n    }\n    return result\n}\n\nexport const createRow = (range: number): number[] => {\n    if (Math.sqrt(range) % 1 !== 0) return []\n    const result: number[] = []\n    for (let iter: number = 0; iter < range; iter++) result.push(iter)\n    return result\n}\n\nexport const createBoard = (arr: number[]): number[][] => {\n    const size = Math.sqrt(arr.length)\n    if (size % 1 !== 0) return [[]]\n    const result: number[][] = []\n    for (let row: number = 0; row < arr.length; row += size) result.push(arr.slice(row, row + size))\n    return result\n}\n\nexport const generateBoard = (size: number): number[][] => {\n    let row = shuffle(createRow(Math.pow(size, 2)))\n    let board = createBoard(row)\n    while (!isSolvable(board, row)) {\n        row = shuffle(createRow(Math.pow(size, 2)))\n        board = createBoard(row)\n    }\n    return board\n}","import {generateBoard} from '../engine/board'\nimport { Board } from '../interfaces';\n\nconst boardState: Board  = {\n    size: 3,\n    values: [],\n\n    generate: () => {\n        boardState.values = generateBoard(boardState.size)\n    },\n\n    clear: () => {\n        boardState.size = 3,\n        boardState.values = []\n    }\n}\n\nexport default boardState;","import {titleElement, buttonElement, contentElement} from './utils'\nimport {blockoutUI, mainUI, soundEffect} from './main_ui'\nimport timeState from '../state/time'\nimport boardState from '../state/board'\nimport moveState from '../state/move'\nimport soundState from '../state/sound'\nimport { gameUI } from './game_ui'\nimport { gameOverUI } from './game_over_ui'\n\nexport const menuUI = () => {\n    const menu = document.createElement('div')\n    menu.className = 'menu'\n    menu.append(contentElement({ className: menu.className + '__content', elements: [\n        titleElement({ type: 'h2', className: menu.className + '__title', textContent: 'menu' }),\n        buttonElement({\n            className: menu.className + '__resume-btn',\n            textContent: 'Resume',\n            eventListener: (event) => {\n                const menu = document.querySelector('.menu')\n                const blockout = document.querySelector('.blockout')\n\n                if (!menu || !blockout) return\n\n                menu.classList.remove('menu_show')\n                blockout.classList.remove('blockout_show')\n\n                timeState.start()\n            }\n        }),\n        buttonElement({\n            className: menu.className + '__restart-btn',\n            textContent: 'Restart',\n            eventListener: (event) => {\n                document.body.innerHTML = ''\n                boardState.generate()\n                timeState.clear()\n                moveState.clear()\n                document.body.append(\n                    soundEffect(),\n                    gameUI({size: boardState.size, board: boardState.values}),\n                    menuUI(),\n                    gameOverUI(),\n                    blockoutUI()\n                )\n            }\n        }),\n        buttonElement({\n            className: menu.className + '__sound-btn',\n            textContent: 'Sound: off',\n            eventListener: (event) => {\n                if (!soundState.on) {\n                    soundState.on = true;\n                    (event.target as HTMLElement).textContent = 'Sound: on';\n                } else {\n                    soundState.on = false;\n                    (event.target as HTMLElement).textContent = 'Sound: off';\n                }\n            }\n        }),\n        buttonElement({\n            className: menu.className + '__save-btn',\n            textContent: 'Save game',\n            eventListener: (event) => {}\n        }),\n        buttonElement({\n            className: menu.className + '__exit-btn',\n            textContent: 'Exit',\n            eventListener: (event) => {\n                document.body.innerHTML = ''\n                document.body.append(\n                    mainUI()\n                )\n                boardState.clear()\n                timeState.clear()\n                moveState.clear()\n                soundState.clear()\n            }\n        })\n    ] }))\n    return menu\n}","import boardState from '../state/board'\nimport moveState from '../state/move'\nimport timeState from '../state/time'\nimport { gameUI } from './game_ui'\nimport { blockoutUI, mainUI } from './main_ui'\nimport { menuUI } from './menu_ui'\nimport {titleElement, buttonElement, contentElement} from './utils'\n\nexport const message = (time: string, moves: number) => `Hooray! You solved the puzzle in ${time} and ${moves} moves.`\n\nexport const gameOverUI = () => {\n    const gameover = document.createElement('div')\n    gameover.className = 'gameover'\n    gameover.append(\n        contentElement({ className: gameover.className + '__content', elements: [\n            titleElement({ type: 'h2', className: gameover.className + '__message', textContent: message('00:00', 0)}),\n            buttonElement({\n                className: gameover.className + '__restart-btn',\n                textContent: 'Restart',\n                eventListener: (event) => {\n                    document.body.innerHTML = ''\n                    boardState.generate()\n                    timeState.clear()\n                    moveState.clear()\n                    document.body.append(\n                        gameUI({size: boardState.size, board: boardState.values}),\n                        menuUI(),\n                        gameOverUI(),\n                        blockoutUI()\n                    )\n                }\n            }),\n            buttonElement({\n                className: gameover.className + '__exit-btn',\n                textContent: 'Exit',\n                eventListener: (event) => {\n                    document.body.innerHTML = ''\n                    document.body.append(\n                        mainUI()\n                    )\n                    boardState.clear()\n                    timeState.clear()\n                    moveState.clear()\n                }\n            })\n        ]})\n    )\n    return gameover\n}","import {titleElement, buttonElement, contentElement} from './utils'\n\nimport timeState from '../state/time'\nimport { move } from '../engine/mover'\nimport { getNumberPosition } from '../engine/searcher'\nimport { isSolved } from '../engine/solver'\nimport { updateText } from './updater'\nimport { message } from './game_over_ui'\nimport moveState from '../state/move'\nimport { ButtonElement, TitleElement } from '../interfaces'\n\nexport const gameUI = (state: { size: number, board: number[][] }): HTMLElement => {\n    timeState.start()\n    const game = document.createElement('div')\n    game.className = 'game'\n    game.append(\n        contentElement({className: game.className + '__content', elements: [\n            gameInfoUI({\n                className: game.className + '__info',\n                moves: {\n                    className: game.className + '__moves',\n                    title: {\n                        type: 'h2',\n                        className: game.className + '__moves-title',\n                        textContent: 'moves:'\n                    },\n                    value: {\n                        type: 'h2',\n                        className: game.className + '__moves-value',\n                        textContent: '0'\n                    }\n                },\n                time: {\n                    className: game.className + '__time',\n                    title: {\n                        type: 'h2',\n                        className: game.className + '__time-title',\n                        textContent: 'time:'\n                    },\n                    value: {\n                        type: 'h2',\n                        className: game.className + '__time-value',\n                        textContent: '00:00'\n                    }\n                },\n                burger: {\n                    className: game.className + '__burger',\n                    textContent: '',\n                    eventListener: (event) => {\n                        const menu = document.querySelector('.menu')\n                        const blockout = document.querySelector('.blockout')\n                        if (!menu || !blockout) return\n                        if (!menu.classList.contains('menu_show')) {\n                            menu.classList.add('menu_show')\n                            blockout.classList.add('blockout_show')\n                            timeState.stop()\n                        } else {\n                            menu.classList.remove('menu_show')\n                            blockout.classList.remove('blockout_show')\n                        }\n                    }\n                }\n            }),\n            boardUI({\n                className: game.className + '__board',\n                board: {\n                    size: state.size,\n                    grid: state.board,\n                    content: {className: game.className + '__board-content'},\n                    item: {\n                        className: game.className + '__board-item',\n                        index: {\n                            className: game.className + '__board-item-index'\n                        },\n                        eventListener: (event, element) => {\n                            if (!element) return\n                            const number = element.childNodes[0].textContent\n                            if (!number) return\n                            const current = getNumberPosition(state.board, parseInt(number))\n                            move(state.board, current, element)\n                            if (isSolved(state.board)) {\n                                timeState.stop()\n                                updateText('gameover__message', message(timeState.format, moveState.amount))\n                                const gameover = document.querySelector('.gameover')\n                                const blockout = document.querySelector('.blockout')\n                                if (!gameover || !blockout) return\n                                gameover.classList.add('gameover_show')\n                                blockout.classList.add('blockout_show')\n                            }\n                        }\n                    }\n                }\n            })\n        ]})\n    )\n    return game\n}\n\nexport const gameInfoUI = (state: {\n    className: string,\n    moves: { className: string, title: TitleElement, value: TitleElement },\n    time: { className: string, title: TitleElement, value: TitleElement },\n    burger: ButtonElement\n}): HTMLElement => {\n    const gameInfo = document.createElement('div')\n    gameInfo.className = state.className\n    gameInfo.append(\n        contentElement({className: state.moves.className, elements: [titleElement(state.moves.title), titleElement(state.moves.value)]}),\n        contentElement({className: state.time.className, elements: [titleElement(state.time.title), titleElement(state.time.value)]}),\n        buttonElement(state.burger)\n    )\n    return gameInfo\n}\n\nexport const boardUI = (state: {\n    className: string,\n    board: { size: number, grid: number[][], content: {className: string}, item: { \n        className: string, index: {className: string}, eventListener: (event: MouseEvent, element: HTMLElement) => void\n    }}\n}): HTMLElement => {\n    const board = document.createElement('div')\n    board.className = state.className\n    const content = document.createElement('div')\n    content.className = state.board.content.className\n    const {grid} = state.board\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[0].length; j++) {\n            const item = document.createElement('div')\n            item.className = state.board.item.className\n            item.id = 'board-' + grid[i][j]\n            item.style.width = `${100 / state.board.size}%`\n            item.style.height = `${100 / state.board.size}%`\n            item.style.left = `${((((i * state.board.size) + j) % state.board.size) * (100 / state.board.size))}%`\n            item.style.top = `${(Math.floor(((i * state.board.size) + j) / state.board.size) * (100 / state.board.size))}%`\n            item.draggable = true\n            item.append(\n                titleElement({type: 'h2', className: state.board.item.index.className, textContent: String(grid[i][j])})\n            )\n\n            if (grid[i][j] === 0) {\n                item.id = 'blank'\n                item.style.opacity = '0'\n                item.addEventListener('drop', (event) => {\n                    event.preventDefault()\n                    if (!event || !event.dataTransfer) return\n                    const number = parseInt(event.dataTransfer.getData(\"text\"))\n                    const current = getNumberPosition(state.board.grid, number)\n                    const element = document.getElementById('board-' + number)\n                    if (!element) return\n                    move(state.board.grid, current, element)\n                    if (isSolved(state.board.grid)) {\n                        timeState.stop()\n                        updateText('gameover__message', message(timeState.format, moveState.amount))\n                        const gameover = document.querySelector('.gameover')\n                        const blockout = document.querySelector('.blockout')\n                        if (!gameover || !blockout) return\n                        gameover.classList.add('gameover_show')\n                        blockout.classList.add('blockout_show')\n                    }\n                })\n                item.addEventListener(\"dragover\", (event) => {\n                    event.preventDefault()\n                })\n\n            } else {\n                item.addEventListener('click', (event) => state.board.item.eventListener(event, item))\n                item.addEventListener('dragstart', (event) => {\n                    if (!event || !event.dataTransfer || !item.textContent) return\n                    event.dataTransfer.setData(\"text\", item.textContent)\n                })\n            }\n            content.append(item)\n        }\n    }\n    board.append(content)\n    return board\n}","import {titleElement, buttonElement, contentElement} from './utils'\nimport {updateText} from './updater'\nimport {gameUI} from './game_ui'\nimport {menuUI} from './menu_ui'\nimport boardState from '../state/board'\nimport { gameOverUI } from './game_over_ui'\nimport { ButtonElement } from '../interfaces'\n\nexport const mainUI = (): HTMLElement => {\n    const main = document.createElement('div')\n    main.className = 'main'\n    main.append(contentElement({className: main.className + '__content', elements: [\n        titleElement({\n            type: 'h2',\n            className: main.className + '__title',\n            textContent: 'gem-puzzle'\n        }),\n        sliderElement({\n            className: main.className + '__slider',\n            leftBtn: {\n                className: main.className + '__slider-left',\n                textContent: '<',\n                eventListener: (event) => {\n                    if (boardState.size > 3) {\n                        boardState.size -= 1\n                        updateText(main.className + '__slider-current', String(boardState.size))\n                    }\n                }\n            },\n            currentBtn: {\n                className: main.className + '__slider-current',\n                textContent: '3',\n                eventListener: (event) => {}\n            },\n            rightBtn: {\n                className: main.className + '__slider-right',\n                textContent: '>',\n                eventListener: (event) => {\n                    if (boardState.size < 8) {\n                        boardState.size += 1\n                        updateText(main.className + '__slider-current', String(boardState.size))\n                    }\n                }\n            }\n        }),\n        buttonElement({\n            className: main.className + '__play-btn',\n            textContent: 'Play',\n            eventListener: (event) => {\n                document.body.innerHTML = ''\n                boardState.generate()\n                document.body.append(\n                    soundEffect(),\n                    gameUI({size: boardState.size, board: boardState.values}),\n                    menuUI(),\n                    gameOverUI(),\n                    blockoutUI()\n                )\n            }\n        }),\n        buttonElement({\n            className: main.className + '__scoreboard-btn',\n            textContent: 'Scoreboard',\n            eventListener: (event) => {}\n        }),\n        buttonElement({\n            className: main.className + '__guide-btn',\n            textContent: 'Guide',\n            eventListener: (event) => {}\n        })\n    ]}))\n    return main\n}\n\nexport const blockoutUI = () => {\n    const blockout = document.createElement('div')\n    blockout.className = 'blockout'\n    return blockout\n}\n\nexport const soundEffect = () => {\n    const sound = document.createElement('audio')\n    sound.className = 'sound'\n    sound.src = './src/sounds/move_sound.mp3'\n    return sound\n}\n\nconst sliderElement = (state: {\n    className: string,\n    leftBtn: ButtonElement,\n    currentBtn: ButtonElement,\n    rightBtn: ButtonElement\n}): HTMLElement => {\n    const slider = document.createElement('div')\n    slider.className = state.className\n    const leftButton = buttonElement(state.leftBtn)\n    const currentButton = buttonElement(state.currentBtn)\n    const rightButton = buttonElement(state.rightBtn)\n    slider.append(leftButton, currentButton, rightButton)\n    return slider\n}\n","import {mainUI} from './ui/main_ui'\n\ndocument.body.append(mainUI())\n"],"sourceRoot":""}